AWSTemplateFormatVersion: '2010-09-09'
Description: 'AmazonQ Typing Game - S3 + CloudFront Distribution'

Parameters:
  BucketName:
    Type: String
    Default: amazonq-typing-game
    Description: Name for the S3 bucket (must be globally unique)
    
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # S3 Bucket for hosting static website
  GameBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${BucketName}-${Environment}-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy for public read access
  GameBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GameBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${GameBucket}/*'

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${BucketName}-${Environment}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  GameDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'AmazonQ Typing Game Distribution - ${Environment}'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 0
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt GameBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref OriginAccessControl
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # IAM Role for deployment
  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'AmazonQTypingGame-DeploymentRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3DeploymentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${GameBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${GameBucket}'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${GameDistribution}'

Outputs:
  BucketName:
    Description: Name of the S3 bucket
    Value: !Ref GameBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  BucketWebsiteURL:
    Description: URL for website hosted on S3
    Value: !GetAtt GameBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-BucketWebsiteURL'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref GameDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt GameDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'

  GameURL:
    Description: URL to access the typing game
    Value: !Sub 'https://${GameDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-GameURL'

  DeploymentRoleArn:
    Description: ARN of the deployment role
    Value: !GetAtt DeploymentRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeploymentRoleArn'
